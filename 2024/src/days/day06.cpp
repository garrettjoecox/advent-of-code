#include <iostream>
#include <cassert>
#include <regex>
#include <map>
#include <sstream>
#include <set>
#include <string>

static std::string exampleInput = R""""(
....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#...
)"""";

static std::string puzzleInput = R""""(
...#..................#...................#......................#..............................#.............................#...
....#.......................#........#.#..............##...........#.....#..........#..........................#..................
.............#........................................................................#.........#.#..#..#..........#..............
..........#.......#..........#..................#........##...................#..............#....................................
....................#..........................................................#..#.....................................#.........
....#............................#..............................................#.....................#..........##....#..........
.......#.............#......................................................................#.............#.........#.............
....###......................#....#...........#.....#................................#..........................#.................
..........#..#...........#..#........................................................#.....#...........#................#.........
..#....#......#....#....#...................................................................#.....................................
....................#............#............................................#......#....#...............................#.......
..........#.......#.........#.......#.............................................................................................
.......#...#.......................................#...................#..........................................................
.......#........#............................#.....#.......#..............................................#..................#...#
.....................#.................................#................#...#...............#.....#.#..........................#..
.....#..........................................#......................#.............##..............................#........#...
.....#......#.........................#..........................#..........................................................#..#..
.#......#.............#......#.................................................#.....#...................##......#................
.............................................................................##...................................................
........................................#.......................................#........#.............................#.#.......#
...........#.....................................#.............................#......#......#..#....................#..#.........
.............................................#.......................#..................##....#.....#.............................
........................#..............................................................#..........................................
#..............#.........................#........#...#...............#..............#..................#....................##...
...#...#.............................#.......#................................................#........................#....#.....
.....#.........................#..#.......................#..........#.....................#..................#.#.....#...........
..................#........#..#.......#...................................................................................#....#..
..#...#...............................................#.#..#........................................................#....#......#.
...............#...............#..........................#............................#..........#.............#.................
............#.....#........#.........................................................#........#........#.....#........#......#....
............................#.........#....#........#.....#...#.............#.................................#...................
........#..................#....#..........................................................#.#.#..................................
....................................................................................................................#.............
#............#.............#..................#......................................................................#............
...............................#....#..........#...........##........................................................#.........#.#
................#.........................................#.................................................#........#............
..............................................#............#................#........#........................#...................
..................#.........#..........................#.............#...............#............#....................#..........
........................#...#...............................................#..............#.....#.....................#..........
...........#.......................................#..............................#..................#....#...##..................
#...............#..................#...............................#...............................#.....................#........
.............#...............................................................##...................................................
.................#.............#.......................#...#............#.#....#................................#...........#.....
#......#......#..................................##.................#.#...............................#...........................
.#...............#..........#...............................................#...#..........#..........#...........................
.....................................#............................#....#.............................................#...#........
......#...#.............#.#....................#.........#..........##.................................#..........#..........#....
.............................#..................#....#..............##.......................#.#.....#........#...................
.................................................#.#......................................................#................#......
......................................#..........................................#......#.........................................
#....................#...........................................................#..................#.............................
.....#.........#...................................................#....#.#....#.#.........#......................................
........#..........#......#.............#................................#.....#................#.................................
...........#................................#...........#..........#......#.............#........................#................
.......#...............#....................#..#................................................#.................................
.....................#.........#..#............#..........#...........#...........#...............................#...............
................#...#........#...........#..........................................................#..#...................#......
.........................................................#.....................#...#......................#.#....................#
................#......#....#.#..............#............#.......................................................................
..........#.....................................#......................................................................#..........
#......................................#.......#.....##..#.....................#.........#.......#................................
........#...#..............#....................#................................#..............................................#.
.##............................................................................#......#................................#..........
.#........................#..............#..............................................#........#.....#.......#..................
#......................................#.....................#...................................................................#
............................#.....#.....#............#...............#...#.......#.........#......................................
.#.........................#.......................#.........#.......#.................#............................#..#..........
.............................................................................................................#........##..........
...........#...#...#.#................#.....................................#........#............................................
......#.......................#..........#.......#................................................................#...............
........#....#........#..................#....##.....#............#..............................#...........#...........#..#.....
..................................#...............................................................................#...............
.....................#.#.......................#....................................#.............................................
........................................................................................#.........#.................#.........#...
..........................#..........#....#..........................................#.......................#............#.#.....
...............................................#.#....#...............................#...................#......................#
.....#...........#........#.#.......#.............................#..................#............................................
...............#.........................................................#....................#.................#.............#...
#....................................##..........#................................................................#...............
...............#.................#...#..............#......................................................#..............#.......
...................#......#.............................................#......................................................#.#
..#.............#.......#......#....#..#..#.......................................................................................
.........#....................................................#.....................................#..............#..............
..............#..............#................................................................#.......................#...........
..........................#.................#.......................................................##...................#.#......
...............#..#...................................................................................................#.......###.
...#.....................#..#........#..........#..................................................................##.............
.................#.......................................###..............#.........................#.............................
...#.....................................................#.......#..........................#................#..#.................
...................................................#..................#.........................................................#.
.....#.............#...................#...................#.....................................#................................
.....................#.........................#......#...........................................................................
...........#...............#......#.....##...#...#.............................................#........#.#...............#...#...
..............#..............##...........#.......................#..#.^..........................................................
...................#..............................................................................................................
..................#.......#..........#.......#..................#..........#...................................#..................
..............................................................................................#..................................#
......................................................#................#......................#...................................
..............#.........#..............................#.....................#......................#.............................
#................#.........#................#.............................#......................#..#...#..............#..........
.#..#........#................#...............#..................#........#.....................#............#........#...........
.....................................................#.#.........#......................#.............................#........#..
......................#.....................#..#......#..........................#............................#......#............
......................#.........................#..#..................................#.......................#..............#....
..........................#..................#.............#......................................................#...............
..........................#....#........................................#..#...#....#.................#...........................
.......#...........#.......................#............##........#....................................................#..........
#..........................................................................#...........#..........................................
............................................................#.................#..#........................................##......
..#...............................................#....#.................................................##.....#...##.....#......
...#.....##..............................#.........................................................#............#.................
.....#....##............................#....##..........#...#....................................................................
..................................................#..........................#.........##.......#.......................#.........
.........#.....#..........#........#........................#.##..#............#.......................................#..........
.....#...............#.......#..........#.#..........#.....................#.....................................#.....#..........
....#......#............................................................................................##...#.#.#.........#......
...........#........................#.....#....................#..................#.#........#....................................
....................................................#................#.#................................................#.........
..........#..............#.......................#.................#...................................#.............#.#......##..
................##......................................................#.................#.......#.#....................#........
................#......................................................#.............##...............#.....#......#.......#......
..............................#............................#..........#...........#...............................................
.......#.............#....................................................................#..............................#.#......
...#.....................#.#...............................................................#...#..#....#..........................
....#.........##......#..............................................................................#..................#.........
....#..........................................#......#...................#........##............#................................
..#.......#......#............#........#...#.#...........................#.......#................................................
..........................#...#....................#...............#...#......#.#...#...#...............#.#.#.....................
....##.#....................................................................#...#.....##........................#.##..............
.............................................#....................................................................................
)"""";

typedef enum {
    NORTH_WEST,
    NORTH,
    NORTH_EAST,
    WEST,
    CENTER,
    EAST,
    SOUTH_WEST,
    SOUTH,
    SOUTH_EAST,
} Direction;

static std::vector<std::pair<int32_t, int32_t>> directionMap = {
    { -1, -1 }, { 0, -1 }, { 1, -1 },
    { -1,  0 }, { 0,  0 }, { 1,  0 },
    { -1,  1 }, { 0,  1 }, { 1,  1 },
};

typedef std::vector<std::vector<char>> Grid;

static void parse(std::string input, Grid& result) {
    std::istringstream inputStream(input);
    std::string line;

    while (std::getline(inputStream, line, '\n')) {
        if (line.empty()) continue;

        std::vector<char> lineChars = {};

        for (int i = 0; i < line.length(); i++) {
            lineChars.push_back(line.at(i));
        }

        result.push_back(lineChars);
    }
}

static std::pair<int32_t, int32_t> findChar(char c, Grid& grid) {
    for (size_t y = 0; y < grid.size(); y++) {
        for (size_t x = 0; x < grid[y].size(); x++) {
            if (grid[y][x] == c) {
                return { x, y };
            }
        }
    }

    assert("Did not find char");
    return { -1, -1 };
}

static Direction turnRight(Direction direction) {
    switch (direction) {
        case NORTH:
            return EAST;
        case EAST:
            return SOUTH;
        case SOUTH:
            return WEST;
        case WEST:
        default:
            return NORTH;
    }
}

static void printGrid(Grid& grid) {
    for (size_t y = 0; y < grid.size(); y++) {
        for (size_t x = 0; x < grid[y].size(); x++) {
            printf("%c", grid[y][x]);
        }
        printf("\n");
    }
}

static bool predictPath(Grid& grid) {
    auto [x, y] = findChar('^', grid);
    auto direction = NORTH;
    std::set<std::pair<std::pair<int32_t, int32_t>, Direction>> turnedAtObstacle;
    
    // Set their current cell to visited
    grid[y][x] = 'X';

    while(true) {
        int32_t targetX = x + directionMap[direction].first;
        int32_t targetY = y + directionMap[direction].second;

        // Check if they are exiting room
        if (
            targetX < 0 || targetX >= grid[0].size() ||
            targetY < 0 || targetY >= grid.size()
        ) {
            return true;
        }

        // Check if target is obstructed
        if (grid[targetY][targetX] == '#') {
            // Check if we've already reached this obstacle from this direction (this means we've reached a loop)
            if (turnedAtObstacle.count({ { targetX, targetY }, direction })) {
                return false;
            }
            turnedAtObstacle.insert({ { targetX, targetY }, direction });

            // Turn Right
            direction = turnRight(direction);
            continue;
        }

        // Set target cell to visited
        grid[targetY][targetX] = 'X';
        x = targetX;
        y = targetY;
    }
}

static int32_t countCharInGrid(char c, Grid& grid) {
    int32_t count = 0;

    for (size_t y = 0; y < grid.size(); y++) {
        for (size_t x = 0; x < grid[y].size(); x++) {
            if (grid[y][x] == c) {
                count++;
            }
        }
    }

    return count;
}

static int32_t findDistinctCoords(std::string input) {
    Grid grid;

    parse(input, grid);
    predictPath(grid);
    return countCharInGrid('X', grid);
}

static int32_t findPossibleLoopCausers(std::string input) {
    Grid grid;

    parse(input, grid);

    int32_t loopCausers = 0;

    for (size_t y = 0; y < grid.size(); y++) {
        for (size_t x = 0; x < grid[y].size(); x++) {
            if (grid[y][x] != '.') continue;

            // Create a copy of the grid
            Grid tempGrid = grid;
            // Set the current coord to an obstacle
            tempGrid[y][x] = '#';
            if (!predictPath(tempGrid)) {
                loopCausers++;
            }
        }
    }

    return loopCausers;
}

void day06() {
    int32_t partOneExampleOutput = findDistinctCoords(exampleInput);
    printf("Part One Example: %d\n", partOneExampleOutput);
    assert(partOneExampleOutput == 41);

    int32_t partOneOutput = findDistinctCoords(puzzleInput);
    printf("Part One: %d\n", partOneOutput);
    assert(partOneOutput == 4433);

    int32_t partTwoExampleOutput = findPossibleLoopCausers(exampleInput);
    printf("Part Two Example: %d\n", partTwoExampleOutput);
    assert(partTwoExampleOutput == 6);

    int32_t partTwoOutput = findPossibleLoopCausers(puzzleInput);
    printf("Part Two: %d\n", partTwoOutput);
    assert(partTwoOutput == 1516);
}
